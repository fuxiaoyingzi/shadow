apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: 'tinkerpatch.gradle'

android {
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    // 	签名配置 属性1keyAlias：key的别名；属性2keyPassword:Key密码;
    // 属性3storeFile:签名用的文件;属性4storePassword:签名用的文件的密码;
    // 属性5storeType:签名用的文件类型;属性6v1SigningEnabled:是否开启JAR signature scheme v1签名;
    // 属性7v2SigningEnabled:是否开启APK Signature Scheme v2签名
    // https://raw.githubusercontent.com/mcxiaoke/packer-ng-plugin/master/compatibility.md
    signingConfigs {//配置 签名配置
        config {
            keyAlias 'shadow'
            keyPassword PASSWORD
            storeFile file('C:/Android/keystore/shadow.jks')
            storePassword PASSWORD
        }
    }
    compileSdkVersion 28 //必须设置，编译的sdk版本,一般设置最新的sdk版本号
    buildToolsVersion '28.0.3' //必须设置,build tools的版本
    defaultConfig { //默认配置，所有flavors共享
        applicationId "com.example.administrator.shadowapplication"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        flavorDimensions "versionCode" //指定flavor尺寸的名称

        //设置支持的SO库架构
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }

        manifestPlaceholders = [
                JPUSH_APPKEY : "03353da660f21abedfe0d4bf", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        //添加了javaCompileOptions
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

    }
    buildTypes { //项目类型(debug、release)
        release {
            minifyEnabled true //用来控制是否运行混淆
            shrinkResources true //打开压缩资源
            //返回混淆器要使用的配置文件。有2个默认的规则文件，proguard-android.txt和proguard-android-optimize.txt。
            // 这两个文件位于SDK,使用getDefaultProguardFile(字符串文件名)将返回文件的完整路径,除了启用优化，这两个文件是相同的
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.config
        }
    }

    //lint 检查
    lintOptions {
        disable 'ResourceType' // 忽略自定义id
        disable 'MissingTranslation' // 忽略未翻译的字符串
        abortOnError false
        disable 'GoogleAppIndexingWarning'
        baseline file("lint-baseline.xml")
    }
//productFlavors打包渠道就在这儿配置咯 同时在AndroidManifest里面加上，渠道标识,因为我们没有加统计，所以我们不用设置多渠道标识
    //所谓多渠道打包，就是构成不同的apk名字，发布的不同的平台上，根据此名称可以做出相应的统计操作
    /* productFlavors {
         Xiaomi {}
     }
 */

    productFlavors {
        xiaomi {}
        yahu360 {}
        wandoujia {}
        baidu {}
        oppo {}
    }
    productFlavors.all() {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    dataBinding {
        enabled = true
    }

    /*kapt {
        generateStubs = true
    }*/

//    dexOptions {
//        javaMaxHeapSize "4g"
////        //加快编译速度
//        incremental true
//    }

    //apk 名称
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = outputFile.name.replace(".apk", "_${defaultConfig.versionName}_prod.apk")
                def fileName = "shadow_${defaultConfig.versionName}_${variant.buildType.name}_${variant.productFlavors[0].name}.apk"
                output.outputFileName = fileName.toLowerCase()
            }
        }
    }


    //Java 版本号
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    supportVersion = "27.0.2"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    //glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'jp.wasabeef:glide-transformations:4.0.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.google.code.gson:gson:2.8.1'
    //dagger
    implementation 'com.google.dagger:dagger:2.21'
    implementation 'com.google.dagger:dagger-android:2.16'
    implementation 'com.google.dagger:dagger-android-support:2.16'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.21'
    testCompile 'junit:junit:4.12'
    compile files('libs/BaiduLBS_Android.jar')
    compile files('libs/httpmime-4.1.2.jar')
    //http
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup:android-times-square:1.6.5@aar'
    //eventBus
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    implementation 'io.reactivex:rxjava:1.3.0'
    implementation 'io.reactivex:rxandroid:1.2.1'
    //butter knife
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.41"
    implementation 'org.jetbrains.anko:anko:0.10.4'
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.prolificinteractive:material-calendarview:1.4.3'

    //相册选择
    implementation 'com.yanzhenjie:album:2.1.1'
    //多类型 multitype
    implementation 'me.drakeet.multitype:multitype:3.4.4'
    //高德地图

    //3D地图so及jar
    implementation 'com.amap.api:3dmap:latest.integration'
    //定位功能
    implementation 'com.amap.api:location:latest.integration'
    //搜索功能
    implementation 'com.amap.api:search:latest.integration'

    //阿里 热修复框架 andFix
    implementation 'com.alipay.euler:andfix:0.5.0@aar'

    // 动画加载框架
    implementation 'com.airbnb.android:lottie:2.2.0'

    //极光统计
    implementation 'cn.jiguang.sdk:janalytics:2.1.0' // 此处以JAnalytics 2.0.0 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.0.1' // 此处以JCore 1.2.6 版本为例。

    //今日头条 布局适配
    implementation 'me.jessyan:autosize:1.1.2'


    // 热修复 若使用annotation需要单独引用,对于tinker的其他库都无需再引用
    provided("com.tinkerpatch.tinker:tinker-android-anno:1.9.13.3")
    implementation("com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.13.3")


    //UEtool
    debugImplementation 'me.ele:uetool:1.2.3'
    releaseImplementation 'me.ele:uetool-no-op:1.2.3'

}
